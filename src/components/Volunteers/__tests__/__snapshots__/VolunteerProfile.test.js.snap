// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`VolunteerProfile should match snapshot 1`] = `
<_default
  refer={
    Object {
      "_updateAmbassador": [MockFunction],
    }
  }
  volunteer={
    Object {
      "address": Object {
        "address1": "123 Test St",
        "address2": "Apt 4",
        "city": "Test City",
        "state": "GA",
        "zip": "00000",
      },
      "date_of_birth": 18000000,
      "email": "foo@bar.baz",
      "first_name": "Foo",
      "id": 1,
      "last_name": "Bar",
    }
  }
>
  <div
    style={
      Object {
        "width": "30%",
      }
    }
  >
    <ProfileField
      editing={false}
      field="first_name"
      invalidFields={Object {}}
      label="First Name"
      onChange={[Function]}
      type="text"
      value="Foo"
    >
      <div>
        First Name
        : 
        Foo
      </div>
    </ProfileField>
    <ProfileField
      editing={false}
      field="last_name"
      invalidFields={Object {}}
      label="Last Name"
      onChange={[Function]}
      type="text"
      value="Bar"
    >
      <div>
        Last Name
        : 
        Bar
      </div>
    </ProfileField>
    <ProfileField
      editing={false}
      field="address1"
      invalidFields={Object {}}
      label="Address Line 1"
      onChange={[Function]}
      type="text"
      value="123 Test St"
    >
      <div>
        Address Line 1
        : 
        123 Test St
      </div>
    </ProfileField>
    <ProfileField
      editing={false}
      field="address2"
      invalidFields={Object {}}
      label="Address Line 2"
      onChange={[Function]}
      type="text"
      value="Apt 4"
    >
      <div>
        Address Line 2
        : 
        Apt 4
      </div>
    </ProfileField>
    <ProfileField
      editing={false}
      field="city"
      invalidFields={Object {}}
      label="City"
      onChange={[Function]}
      type="text"
      value="Test City"
    >
      <div>
        City
        : 
        Test City
      </div>
    </ProfileField>
    <ProfileField
      editing={false}
      field="state"
      invalidFields={Object {}}
      label="State"
      onChange={[Function]}
      type="text"
      value="GA"
    >
      <div>
        State
        : 
        GA
      </div>
    </ProfileField>
    <ProfileField
      editing={false}
      field="zip"
      invalidFields={Object {}}
      label="Zip"
      onChange={[Function]}
      type="number"
      value="00000"
    >
      <div>
        Zip
        : 
        00000
      </div>
    </ProfileField>
    <ProfileField
      editing={false}
      label="Phone"
    >
      <div>
        Phone
        : 
      </div>
    </ProfileField>
    <ProfileField
      editing={false}
      field="email"
      invalidFields={Object {}}
      label="Email"
      onChange={[Function]}
      type="email"
      value="foo@bar.baz"
    >
      <div>
        Email
        : 
        foo@bar.baz
      </div>
    </ProfileField>
    <ProfileField
      editing={false}
      field="date_of_birth"
      invalidFields={Object {}}
      label="Date of Birth"
      onChange={[Function]}
      type="date"
      value={18000000}
    >
      <div>
        Date of Birth
        : 
        18000000
      </div>
    </ProfileField>
    <div>
      <WithStyles(ForwardRef(Button))
        onClick={[Function]}
      >
        <ForwardRef(Button)
          classes={
            Object {
              "colorInherit": "MuiButton-colorInherit",
              "contained": "MuiButton-contained",
              "containedPrimary": "MuiButton-containedPrimary",
              "containedSecondary": "MuiButton-containedSecondary",
              "containedSizeLarge": "MuiButton-containedSizeLarge",
              "containedSizeSmall": "MuiButton-containedSizeSmall",
              "disableElevation": "MuiButton-disableElevation",
              "disabled": "Mui-disabled",
              "endIcon": "MuiButton-endIcon",
              "focusVisible": "Mui-focusVisible",
              "fullWidth": "MuiButton-fullWidth",
              "iconSizeLarge": "MuiButton-iconSizeLarge",
              "iconSizeMedium": "MuiButton-iconSizeMedium",
              "iconSizeSmall": "MuiButton-iconSizeSmall",
              "label": "MuiButton-label",
              "outlined": "MuiButton-outlined",
              "outlinedPrimary": "MuiButton-outlinedPrimary",
              "outlinedSecondary": "MuiButton-outlinedSecondary",
              "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
              "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
              "root": "MuiButton-root",
              "sizeLarge": "MuiButton-sizeLarge",
              "sizeSmall": "MuiButton-sizeSmall",
              "startIcon": "MuiButton-startIcon",
              "text": "MuiButton-text",
              "textPrimary": "MuiButton-textPrimary",
              "textSecondary": "MuiButton-textSecondary",
              "textSizeLarge": "MuiButton-textSizeLarge",
              "textSizeSmall": "MuiButton-textSizeSmall",
            }
          }
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(ButtonBase))
            className="MuiButton-root MuiButton-text"
            component="button"
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            onClick={[Function]}
            type="button"
          >
            <ForwardRef(ButtonBase)
              className="MuiButton-root MuiButton-text"
              classes={
                Object {
                  "disabled": "Mui-disabled",
                  "focusVisible": "Mui-focusVisible",
                  "root": "MuiButtonBase-root",
                }
              }
              component="button"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              onClick={[Function]}
              type="button"
            >
              <button
                className="MuiButtonBase-root MuiButton-root MuiButton-text"
                disabled={false}
                onBlur={[Function]}
                onClick={[Function]}
                onDragLeave={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                onMouseDown={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                tabIndex={0}
                type="button"
              >
                <span
                  className="MuiButton-label"
                >
                  Edit Profile
                </span>
                <NoSsr>
                  <WithStyles(memo)
                    center={false}
                  >
                    <ForwardRef(TouchRipple)
                      center={false}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </NoSsr>
              </button>
            </ForwardRef(ButtonBase)>
          </WithStyles(ForwardRef(ButtonBase))>
        </ForwardRef(Button)>
      </WithStyles(ForwardRef(Button))>
    </div>
  </div>
</_default>
`;

exports[`VolunteerProfile should match snapshot of editing state 1`] = `
<_default
  refer={
    Object {
      "_updateAmbassador": [MockFunction],
    }
  }
  volunteer={
    Object {
      "address": Object {
        "address1": "123 Test St",
        "address2": "Apt 4",
        "city": "Test City",
        "state": "GA",
        "zip": "00000",
      },
      "date_of_birth": 18000000,
      "email": "foo@bar.baz",
      "first_name": "Foo",
      "id": 1,
      "last_name": "Bar",
    }
  }
>
  <div
    style={
      Object {
        "width": "30%",
      }
    }
  >
    <ProfileField
      editing={true}
      field="first_name"
      invalidFields={Object {}}
      label="First Name"
      onChange={[Function]}
      type="text"
      value="Foo"
    >
      <div>
        First Name
        :
         
        <input
          name="first_name"
          onChange={[Function]}
          style={
            Object {
              "width": "100%",
            }
          }
          type="text"
          value="Foo"
        />
      </div>
    </ProfileField>
    <ProfileField
      editing={true}
      field="last_name"
      invalidFields={Object {}}
      label="Last Name"
      onChange={[Function]}
      type="text"
      value="Bar"
    >
      <div>
        Last Name
        :
         
        <input
          name="last_name"
          onChange={[Function]}
          style={
            Object {
              "width": "100%",
            }
          }
          type="text"
          value="Bar"
        />
      </div>
    </ProfileField>
    <ProfileField
      editing={true}
      field="address1"
      invalidFields={Object {}}
      label="Address Line 1"
      onChange={[Function]}
      type="text"
      value="123 Test St"
    >
      <div>
        Address Line 1
        :
         
        <input
          name="address1"
          onChange={[Function]}
          style={
            Object {
              "width": "100%",
            }
          }
          type="text"
          value="123 Test St"
        />
      </div>
    </ProfileField>
    <ProfileField
      editing={true}
      field="address2"
      invalidFields={Object {}}
      label="Address Line 2"
      onChange={[Function]}
      type="text"
      value="Apt 4"
    >
      <div>
        Address Line 2
        :
         
        <input
          name="address2"
          onChange={[Function]}
          style={
            Object {
              "width": "100%",
            }
          }
          type="text"
          value="Apt 4"
        />
      </div>
    </ProfileField>
    <ProfileField
      editing={true}
      field="city"
      invalidFields={Object {}}
      label="City"
      onChange={[Function]}
      type="text"
      value="Test City"
    >
      <div>
        City
        :
         
        <input
          name="city"
          onChange={[Function]}
          style={
            Object {
              "width": "100%",
            }
          }
          type="text"
          value="Test City"
        />
      </div>
    </ProfileField>
    <ProfileField
      editing={true}
      field="state"
      invalidFields={Object {}}
      label="State"
      onChange={[Function]}
      type="text"
      value="GA"
    >
      <div>
        State
        :
         
        <input
          name="state"
          onChange={[Function]}
          style={
            Object {
              "width": "100%",
            }
          }
          type="text"
          value="GA"
        />
      </div>
    </ProfileField>
    <ProfileField
      editing={true}
      field="zip"
      invalidFields={Object {}}
      label="Zip"
      onChange={[Function]}
      type="number"
      value="00000"
    >
      <div>
        Zip
        :
         
        <input
          name="zip"
          onChange={[Function]}
          style={
            Object {
              "width": "100%",
            }
          }
          type="number"
          value="00000"
        />
      </div>
    </ProfileField>
    <ProfileField
      editing={false}
      label="Phone"
    >
      <div>
        Phone
        : 
      </div>
    </ProfileField>
    <ProfileField
      editing={true}
      field="email"
      invalidFields={Object {}}
      label="Email"
      onChange={[Function]}
      type="email"
      value="foo@bar.baz"
    >
      <div>
        Email
        :
         
        <input
          name="email"
          onChange={[Function]}
          style={
            Object {
              "width": "100%",
            }
          }
          type="email"
          value="foo@bar.baz"
        />
      </div>
    </ProfileField>
    <ProfileField
      editing={true}
      field="date_of_birth"
      invalidFields={Object {}}
      label="Date of Birth"
      onChange={[Function]}
      type="date"
      value={18000000}
    >
      <div>
        Date of Birth
        :
         
        <input
          name="date_of_birth"
          onChange={[Function]}
          style={
            Object {
              "width": "100%",
            }
          }
          type="date"
          value={18000000}
        />
      </div>
    </ProfileField>
    <div>
      <WithStyles(ForwardRef(Button))
        onClick={[Function]}
      >
        <ForwardRef(Button)
          classes={
            Object {
              "colorInherit": "MuiButton-colorInherit",
              "contained": "MuiButton-contained",
              "containedPrimary": "MuiButton-containedPrimary",
              "containedSecondary": "MuiButton-containedSecondary",
              "containedSizeLarge": "MuiButton-containedSizeLarge",
              "containedSizeSmall": "MuiButton-containedSizeSmall",
              "disableElevation": "MuiButton-disableElevation",
              "disabled": "Mui-disabled",
              "endIcon": "MuiButton-endIcon",
              "focusVisible": "Mui-focusVisible",
              "fullWidth": "MuiButton-fullWidth",
              "iconSizeLarge": "MuiButton-iconSizeLarge",
              "iconSizeMedium": "MuiButton-iconSizeMedium",
              "iconSizeSmall": "MuiButton-iconSizeSmall",
              "label": "MuiButton-label",
              "outlined": "MuiButton-outlined",
              "outlinedPrimary": "MuiButton-outlinedPrimary",
              "outlinedSecondary": "MuiButton-outlinedSecondary",
              "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
              "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
              "root": "MuiButton-root",
              "sizeLarge": "MuiButton-sizeLarge",
              "sizeSmall": "MuiButton-sizeSmall",
              "startIcon": "MuiButton-startIcon",
              "text": "MuiButton-text",
              "textPrimary": "MuiButton-textPrimary",
              "textSecondary": "MuiButton-textSecondary",
              "textSizeLarge": "MuiButton-textSizeLarge",
              "textSizeSmall": "MuiButton-textSizeSmall",
            }
          }
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(ButtonBase))
            className="MuiButton-root MuiButton-text"
            component="button"
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            onClick={[Function]}
            type="button"
          >
            <ForwardRef(ButtonBase)
              className="MuiButton-root MuiButton-text"
              classes={
                Object {
                  "disabled": "Mui-disabled",
                  "focusVisible": "Mui-focusVisible",
                  "root": "MuiButtonBase-root",
                }
              }
              component="button"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              onClick={[Function]}
              type="button"
            >
              <button
                className="MuiButtonBase-root MuiButton-root MuiButton-text"
                disabled={false}
                onBlur={[Function]}
                onClick={[Function]}
                onDragLeave={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                onMouseDown={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                tabIndex={0}
                type="button"
              >
                <span
                  className="MuiButton-label"
                >
                  Save
                </span>
                <NoSsr>
                  <WithStyles(memo)
                    center={false}
                  >
                    <ForwardRef(TouchRipple)
                      center={false}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </NoSsr>
              </button>
            </ForwardRef(ButtonBase)>
          </WithStyles(ForwardRef(ButtonBase))>
        </ForwardRef(Button)>
      </WithStyles(ForwardRef(Button))>
      <WithStyles(ForwardRef(Button))
        onClick={[Function]}
      >
        <ForwardRef(Button)
          classes={
            Object {
              "colorInherit": "MuiButton-colorInherit",
              "contained": "MuiButton-contained",
              "containedPrimary": "MuiButton-containedPrimary",
              "containedSecondary": "MuiButton-containedSecondary",
              "containedSizeLarge": "MuiButton-containedSizeLarge",
              "containedSizeSmall": "MuiButton-containedSizeSmall",
              "disableElevation": "MuiButton-disableElevation",
              "disabled": "Mui-disabled",
              "endIcon": "MuiButton-endIcon",
              "focusVisible": "Mui-focusVisible",
              "fullWidth": "MuiButton-fullWidth",
              "iconSizeLarge": "MuiButton-iconSizeLarge",
              "iconSizeMedium": "MuiButton-iconSizeMedium",
              "iconSizeSmall": "MuiButton-iconSizeSmall",
              "label": "MuiButton-label",
              "outlined": "MuiButton-outlined",
              "outlinedPrimary": "MuiButton-outlinedPrimary",
              "outlinedSecondary": "MuiButton-outlinedSecondary",
              "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
              "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
              "root": "MuiButton-root",
              "sizeLarge": "MuiButton-sizeLarge",
              "sizeSmall": "MuiButton-sizeSmall",
              "startIcon": "MuiButton-startIcon",
              "text": "MuiButton-text",
              "textPrimary": "MuiButton-textPrimary",
              "textSecondary": "MuiButton-textSecondary",
              "textSizeLarge": "MuiButton-textSizeLarge",
              "textSizeSmall": "MuiButton-textSizeSmall",
            }
          }
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(ButtonBase))
            className="MuiButton-root MuiButton-text"
            component="button"
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            onClick={[Function]}
            type="button"
          >
            <ForwardRef(ButtonBase)
              className="MuiButton-root MuiButton-text"
              classes={
                Object {
                  "disabled": "Mui-disabled",
                  "focusVisible": "Mui-focusVisible",
                  "root": "MuiButtonBase-root",
                }
              }
              component="button"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              onClick={[Function]}
              type="button"
            >
              <button
                className="MuiButtonBase-root MuiButton-root MuiButton-text"
                disabled={false}
                onBlur={[Function]}
                onClick={[Function]}
                onDragLeave={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                onMouseDown={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                tabIndex={0}
                type="button"
              >
                <span
                  className="MuiButton-label"
                >
                  Cancel
                </span>
                <NoSsr>
                  <WithStyles(memo)
                    center={false}
                  >
                    <ForwardRef(TouchRipple)
                      center={false}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </NoSsr>
              </button>
            </ForwardRef(ButtonBase)>
          </WithStyles(ForwardRef(ButtonBase))>
        </ForwardRef(Button)>
      </WithStyles(ForwardRef(Button))>
    </div>
  </div>
</_default>
`;
